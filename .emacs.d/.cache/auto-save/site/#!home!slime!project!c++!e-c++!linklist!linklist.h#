#ifndef _H_LINKLIST_H
#define _H_LINKLIST_H

template <class list>
class list{
public:
  explicit list(const allocator_type& a = allocator_type())
    : Base(a) {}
  list(size_type n, const allocator_type& a = allocator_type())
    : Base(a) {}
  explicit list(size_type n)
    : Base(allocator_type()) {}
  list(const list<Tp, Alloc>& x)
    : Base(x.get_allocator()) {
    
  }

  ~list() {}


  iterator begin() {}
  const_iterator begin() const {}
  iterator end() {};
  const_iterator end() const {}

  reverse_iterator rbegin() {}
  const_reverse_iterator rbegin() const {}
  reverse_iterator rend() {}
  const_reverse_iterator rend() const {}

  bool empty() {}

  size_type size() {}
  size_type max_size() {}

  reference front() {}
  reference back() {}

  void swap() {}

  iterator insert(const iterator& position, const Tp& x) {}
  iterator insert(const iterator& position) {
    return insert(position, Tp());
  }

#ifdef _MEMBER_TEMPLATES 
  //check whether it's an integral type.  If so, it's not an iterator.

#else /*_MEMBER_TEMPLATES*/

#endif /*_MEMBER_TEMPLATES*/
  /*
    void insert(iterator __pos, size_type __n, const _Tp& __x)
    { _M_fill_insert(__pos, __n, __x); }
    void _M_fill_insert(iterator __pos, size_type __n, const _Tp& __x);
  */

  void insert(iterator pos, size_tyep n, const Tp x) {  }
  void M_fill_insert(iterator pos, size_type n, const Tp& x);

  void push_front(const Tp& x) {}
  void push_front() {}
  void push_back(const Tp& x) {}
  void push_back() {}

  iterator erase(iterator pos) {}
  iterator erase(iterator first, iterator last) {}

  void clear() {}

  void resize(size_type new_size, const Tp& x) {}
  void resize(size_type new_size) {}

  void pop_front() {}
  void pop_back() {
    pop_front();
  }



#ifdef _MEMBER_TEMPLATE
  // We don't need any dispatching tricks here, because insert does all of
	// that anyway.
#else /*_MEMBER_TEMPLATE*/

#endif /*_MEMBER_TEMPLATE*/
  list<Tp, Alloc> operator=(const list<Tp, Alloc>& x);

public:
  // assign(), a generalized assignment member function.  Two
	// versions: one that takes a count, and one that takes a range.
	// The range version is a member template, so we dispatch on whether
	// or not the type is an integer.
  void assign(size_type n, const Tp& val) {}
  void M_fill_assign(size_type n, const Tp& val) {}

#ifdef _MEMBER_TEMPLATE

#endif /*_MEMBER_TEMPLATE*/
  void transfer(iterator position, iterator first, iterator last) {}

public:
  void splice(iterator position, list& x) {}
  void splice(iterator position, list& x, iterator i) {}
  void splice(iterator position, list& x, iterator first, iterator last) {}

  void remove(const Tp& value);
  void unique();
  void merge(list& x);
  void reverse();
  void sort();

#ifdef _MEMBER_TEMPLATE

#endif /*_MEMBER_TEMPLATES */


};

#include <string>
#include <vector>

int main() {

}

#endif  /*_H_LINKLIST_H*/

















